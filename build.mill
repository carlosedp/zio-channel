//| mill-version: 1.0.1
//| repositories: [https://s01.oss.sonatype.org/content/repositories/snapshots]
//| mvnDeps:
//| - com.lihaoyi::mill-contrib-scoverage:$MILL_VERSION
//| - com.lihaoyi::mill-contrib-jmh:$MILL_VERSION
//| - com.carlosedp::mill-aliases::1.1.0
//| - com.goyeau::mill-scalafix::0.6.0
//| - org.typelevel::scalac-options:0.1.7

package build

import mill.*, mill.api.BuildCtx, scalalib.*
import scalafmt.*, publish.*
import scalajslib.*, scalanativelib.*
import mill.api.Task.Simple

import mill.contrib.scoverage.*
import contrib.jmh.JmhModule
import com.carlosedp.aliases.*
import org.typelevel.scalacoptions.*
import com.goyeau.mill.scalafix.ScalafixModule

object versions:
  val scala3      = "3.3.6"
  val scalajs     = "1.19.0"
  val scalanative = "0.5.8"
  val zio         = "2.1.20"
  val scoverage   = "2.0.8"
  val jmh         = "1.37"
  val ziojmh      = "0.3.3"

trait Publish extends SonatypeCentralPublishModule:
  def pomSettings = PomSettings(
    description = "Zio-channel is a Go-like channel implementation for ZIO",
    organization = "com.carlosedp",
    url = "https://github.com/carlosedp/zio-channel",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("carlosedp", "zio-channel"),
    developers = Seq(
      Developer("carlosedp", "Carlos Eduardo de Paula", "https://github.com/carlosedp")
    ),
  )

  def latestVersion = Task:
    os.proc("git", "describe", "--tags", "--abbrev=0").call().out.trim().stripPrefix("v")

  def publishVersion: Simple[String] = Task:
    val isTag      = Task.env.get("GITHUB_REF").exists(_.startsWith("refs/tags"))
    val currentTag = os.proc("git", "describe", "--tags", "--abbrev=0").call().out.trim()
    val commits    = os.proc("git", "rev-list", "--count", s"$currentTag..HEAD").call().out.trim().toInt
    if isTag && commits == 0 then currentTag.stripPrefix("v")
    else
      val Array(major, minor, patch) = currentTag.stripPrefix("v").split('.').map(_.toInt)
      s"$major.${minor + 1}.$patch-SNAPSHOT"

end Publish

trait Common extends ScalaModule
    with ScalafmtModule
    with ScalafixModule:
  def scalaVersion = versions.scala3
  def scalacOptions = Task:
    super.scalacOptions() ++
      ScalacOptions.defaultTokensForVersion(
        ScalaVersion.unsafeFromString(scalaVersion())
      ).filterNot(_.contains("-Wnonunit-statement")) // Errors on Temurin 17/21
  def mvnDeps = Seq(
    mvn"dev.zio::zio:${versions.zio}"
  )

trait CommonTests extends TestModule.ZioTest:
  def mvnDeps = Seq(
    mvn"dev.zio::zio-test::${versions.zio}",
    mvn"dev.zio::zio-test-sbt::${versions.zio}",
  )

object `zio-channel` extends Module:
  trait Shared extends Common with Publish:
    def artifactName = "zio-channel"
    def sources      = Task.Sources(moduleDir / os.up / "src")

  object jvm extends Shared with ScoverageModule:
    def scoverageVersion = versions.scoverage
    object test extends ScalaTests with CommonTests with ScoverageTests:
      def sources = Task.Sources(moduleDir / os.up / os.up / "test" / "src")

  object js extends Shared with ScalaJSModule:
    def scalaJSVersion = versions.scalajs
    object test extends ScalaJSTests with CommonTests:
      def sources = Task.Sources(moduleDir / os.up / os.up / "test" / "src")

  object native extends Shared with ScalaNativeModule:
    def scalaNativeVersion = versions.scalanative
    object test extends ScalaNativeTests with CommonTests:
      def sources = Task.Sources(moduleDir / os.up / os.up / "test" / "src")
end `zio-channel`

object examples extends Common:
  def moduleDeps = Seq(`zio-channel`.jvm)

object benchmarks extends Common with JmhModule:
  def jmhCoreVersion = versions.jmh
  def moduleDeps     = Seq(`zio-channel`.jvm)
  def mvnDeps        = super.mvnDeps() ++ Seq(mvn"dev.zio::zio-profiling-jmh:${versions.ziojmh}")

  def copyResultJson = Task:
    println(s"Running from ${Task.dest}")
    val timestamp = os.proc("git", "log", "-1", "--format=%h-%cd", "--date=format:%Y-%m-%dT%H:%M:%S")
      .call(cwd = BuildCtx.workspaceRoot).out.text().trim()
    val benchmarkFile = s"jmh-result-${timestamp}.json"
    val sourceFile    = Task.dest / os.up / "runJmh.dest" / "jmh-result.json"
    val benchmarkDir  = BuildCtx.workspaceRoot / "benchmark-files"

    os.copy.over(sourceFile, benchmarkDir / benchmarkFile)
    os.copy.over(sourceFile, benchmarkDir / "jmh-result-latest.json")
end benchmarks

object scoverage extends ScoverageReport:
  def scalaVersion     = versions.scala3
  def scoverageVersion = versions.scoverage

// Update versions in Readme and examples
def updateExampleVersions() = Task.Command:
  val workspaceRoot  = BuildCtx.workspaceRoot
  val currentVersion = `zio-channel`.jvm.latestVersion()
  val files = Seq(workspaceRoot / "Readme.md") ++
    os.list(workspaceRoot / "examples" / "src").filter(_.ext == "scala")

  println(s"Updating versions in ${files.size} files")
  println(s"Current version: $currentVersion")

  val versionUpdates = Seq(
    ("com.carlosedp::zio-channel:\\d+\\.\\d+\\.\\d+", s"com.carlosedp::zio-channel:$currentVersion"),
    (""""com.carlosedp" %% "zio-channel" % .+""", s""""com.carlosedp" %% "zio-channel" % "$currentVersion""""),
    ("dev.zio::zio:\\d+\\.\\d+\\.\\d+", s"dev.zio::zio:${versions.zio}"),
  )

  files.foreach: file =>
    val content = os.read(file)
    val updatedContent = versionUpdates.foldLeft(content): (acc, update) =>
      acc.replaceAll(update._1, update._2)
    os.write.over(file, updatedContent)

object MyAliases extends Aliases:
  // Formatting
  def fmt      = alias("mill.scalalib.scalafmt.ScalafmtModule/reformatAll __.sources")
  def checkfmt = alias("mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll __.sources")
  def lint     = alias("mill.scalalib.scalafmt.ScalafmtModule/reformatAll __.sources", "__.fix", "__.compile")

  // Dependencies and publishing
  def deps     = alias("mill.scalalib.Dependency/showUpdates")
  def pub      = alias("mill.scalalib.SonatypeCentralPublishModule/")
  def publocal = alias("zio-channel.__.publishLocal")

  // Testing and coverage
  def testall  = alias("__.test")
  def testjvm  = alias("zio-channel.jvm.test")
  def testjs   = alias("zio-channel.js.test")
  def coverage = alias("testall", "scoverage.htmlReportAll", "scoverage.xmlReportAll", "scoverage.consoleReportAll")

  // Benchmarking
  def bench = alias("benchmarks.runJmh -rf json", "benchmarks.copyResultJson")

  // Complete CI pipeline
  def ci = alias("checkfmt", "__.compile", "coverage")
end MyAliases
